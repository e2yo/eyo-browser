(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

},{}],2:[function(require,module,exports){
(function (__dirname){
'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var fs = require('fs');
var path = require('path');
var safeDict = path.resolve(__dirname, '../dict/safe.txt');
var notSafeDict = path.resolve(__dirname, '../dict/not_safe.txt');

module.exports = function () {
    function Dictionary() {
        _classCallCheck(this, Dictionary);

        this._dict = {};
    }

    /**
     * Загружает словарь.
     *
     * @param {string} filename
     * @param {Function} callback
     */


    Dictionary.prototype.load = function load(filename, callback) {
        var _this = this;

        fs.readFile(filename, 'utf8', function (err, data) {
            if (!err) {
                _this.set(data);
            }

            callback(err, data);
        });
    };

    /**
     * Синхронно загружает словарь.
     *
     * @param {string} filename
     */


    Dictionary.prototype.loadSync = function loadSync(filename) {
        var text = fs.readFileSync(filename, 'utf8');
        this.set(text);
    };

    /**
     * Загружает безопасный встроенный словарь.
     *
     * @param {Function} callback
     */


    Dictionary.prototype.loadSafe = function loadSafe(callback) {
        this.load(safeDict, callback);
    };

    /**
     * Синхронно загружает безопасный встроенный словарь.
     */


    Dictionary.prototype.loadSafeSync = function loadSafeSync() {
        this.loadSync(safeDict);
    };

    /**
     * Загружает небезопасный встроенный словарь.
     *
     * @param {Function} callback
     */


    Dictionary.prototype.loadNotSafe = function loadNotSafe(callback) {
        this.load(notSafeDict, callback);
    };

    /**
     * Синхронно загружает небезопасный встроенный словарь.
     */


    Dictionary.prototype.loadNotSafeSync = function loadNotSafeSync() {
        this.loadSync(notSafeDict);
    };

    /**
     * Очищает словарь.
     */


    Dictionary.prototype.clear = function clear() {
        this._dict = {};
    };

    /**
     * Восстанавливает в слове букву «ё».
     *
     * @param {string} word
     *
     * @returns {string}
     */


    Dictionary.prototype.restoreWord = function restoreWord(word) {
        return this._dict[this._replaceYo(word)] || word;
    };

    /**
     * Добавляет слово в словарь.
     *
     * @param {string} word
     */


    Dictionary.prototype.addWord = function addWord(word) {
        var key = this._replaceYo(word);

        this._dict[key] = word;

        if (word.search(/^[А-ЯЁ]/) === -1) {
            this._dict[this._capitalize(key)] = this._capitalize(word);
        }
    };

    /**
     * Удаляет слово из словаря.
     *
     * @param {string} word
     */


    Dictionary.prototype.removeWord = function removeWord(word) {
        var wordE = this._replaceYo(word);

        delete this._dict[wordE];

        if (word.search(/^[А-ЯЁ]/) === -1) {
            delete this._dict[this._capitalize(wordE)];
        }
    };

    /**
     * Установить словарь.
     *
     * @param {string} dict
     */


    Dictionary.prototype.set = function set(dict) {
        this.clear();

        if (!dict) {
            return;
        }

        var buf = dict.split(/\r?\n/);

        for (var _iterator = buf, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
            var _ref;

            if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
            } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
            }

            var word = _ref;

            this.addWord(word);
        }
    };

    /**
     * Получить словарь.
     *
     * @returns {Object}
     */


    Dictionary.prototype.get = function get() {
        return this._dict;
    };

    Dictionary.prototype._capitalize = function _capitalize(text) {
        return text.substr(0, 1).toUpperCase() + text.substr(1);
    };

    Dictionary.prototype._replaceYo = function _replaceYo(word) {
        return word.replace(/Ё/g, 'Е').replace(/ё/g, 'е');
    };

    return Dictionary;
}();

}).call(this,"/node_modules\\eyo-kernel\\lib")
},{"fs":1,"path":4}],3:[function(require,module,exports){
'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Dictionary = require('./dictionary');

var punctuation = '[{}()[\\]|<>=\\_"\'«»„“#$^%&*+-:;.,?!]';
var re = new RegExp('([\u0410-\u042F\u0401\u0430-\u044F\u0451])[\u0430-\u044F\u0451]{1,}(?![\u0430-\u044F\u0451]|\\.[ \xA0\t]+([\u0430-\u044F\u0451]|[\u0410-\u042F\u0401]{2}|' + punctuation + ')|\\.' + punctuation + ')', 'g');

module.exports = function () {
    function Eyo() {
        _classCallCheck(this, Eyo);

        this.dictionary = new Dictionary();
    }

    /**
     * Ищет варианты замены буквы «е» на «ё».
     *
     * @param {string} text
     * @param {boolean} [groupByWords] - Группировать по словам.
     *
     * @returns {Array}
     */


    Eyo.prototype.lint = function lint(text, groupByWords) {
        var that = this;
        var replacement = [];

        if (!text || !this._hasEYo(text)) {
            return [];
        }

        text.replace(re, function (wordE) {
            var pos = arguments[arguments.length - 2];
            var wordYo = that.dictionary.restoreWord(wordE);

            if (wordYo !== wordE) {
                replacement.push({
                    before: wordE,
                    after: wordYo,
                    position: that._getPosition(text, pos)
                });

                return wordYo;
            }

            return wordE;
        });

        if (groupByWords) {
            replacement.sort(this._sort);
            replacement = this._delDuplicates(replacement);
        }

        return replacement;
    };

    /**
     * Восстанавливает букву «ё» в тексте.
     *
     * @param {string} text
     *
     * @returns {string}
     */


    Eyo.prototype.restore = function restore(text) {
        var _this = this;

        if (!text || !this._hasEYo(text)) {
            return text || '';
        }

        text = text.replace(re, function (wordE) {
            var wordYo = _this.dictionary.restoreWord(wordE);

            return wordYo === wordE ? wordE : wordYo;
        });

        return text;
    };

    Eyo.prototype._hasEYo = function _hasEYo(text) {
        return text.search(/[ЕЁеё]/) > -1;
    };

    Eyo.prototype._getPosition = function _getPosition(text, index) {
        var buf = text.substr(0, index).split(/\r?\n/);

        return {
            line: buf.length,
            column: buf[buf.length - 1].length + 1
        };
    };

    Eyo.prototype._delDuplicates = function _delDuplicates(data) {
        var count = {};
        var position = {};
        var result = [];

        data.forEach(function (el) {
            var before = el.before;

            if (count[before]) {
                count[before]++;
            } else {
                count[before] = 1;
            }

            if (!position[before]) {
                position[before] = [];
            }

            position[before].push(el.position);
        });

        var added = {};
        data.forEach(function (el) {
            var before = el.before;

            if (!added[before]) {
                el.count = count[before];
                el.position = position[before];

                result.push(el);

                added[before] = true;
            }
        });

        return result;
    };

    Eyo.prototype._sort = function _sort(a, b) {
        var aBefore = a.before;
        var bBefore = b.before;
        var aBeforeLower = aBefore.toLowerCase();
        var bBeforeLower = bBefore.toLowerCase();

        if (aBefore[0] !== bBefore[0] && aBeforeLower[0] === bBeforeLower[0]) {
            if (aBefore > bBefore) {
                return 1;
            } else {
                return -1;
            }
        } else {
            if (aBeforeLower > bBeforeLower) {
                return 1;
            } else if (aBeforeLower < bBeforeLower) {
                return -1;
            } else {
                return 0;
            }
        }
    };

    return Eyo;
}();

},{"./dictionary":2}],4:[function(require,module,exports){
(function (process){
'use strict';

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function splitPath(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function () {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = i >= 0 ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function (p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return (resolvedAbsolute ? '/' : '') + resolvedPath || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function (path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function (p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function (path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function () {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function (p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};

// path.relative(from, to)
// posix version
exports.relative = function (from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function (path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};

exports.basename = function (path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};

exports.extname = function (path) {
  return splitPath(path)[3];
};

function filter(xs, f) {
  if (xs.filter) return xs.filter(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    if (f(xs[i], i, xs)) res.push(xs[i]);
  }
  return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b' ? function (str, start, len) {
  return str.substr(start, len);
} : function (str, start, len) {
  if (start < 0) start = str.length + start;
  return str.substr(start, len);
};

}).call(this,require('_process'))
},{"_process":5}],5:[function(require,module,exports){
'use strict';

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while (len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
    return [];
};

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () {
    return '/';
};
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function () {
    return 0;
};

},{}],6:[function(require,module,exports){
'use strict';

module.exports = function (words) {
    if (typeof words === 'string') {
        words = words.trim().split(/\r?\n/);
    }

    var result = [];

    for (var _iterator = words, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
        var _ref;

        if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref = _iterator[_i++];
        } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref = _i.value;
        }

        var w = _ref;

        if (w.search(/\(/) > -1) {
            var buf = w.split(/[(|)]/);
            for (var i = 1, len = buf.length - 1; i < len; i++) {
                result.push(buf[0] + buf[i]);
            }
        } else {
            result.push(w);
        }
    }

    return result.sort();
};

},{}],7:[function(require,module,exports){
'use strict';

var Eyo = require('eyo-kernel');
var depack = require('./depack');
var safeEyo = new Eyo();
var unsafeEyo = new Eyo();

var input = document.querySelector('.eyo__input');
var button = document.querySelector('.eyo__button');
var safeReplacement = document.querySelector('.eyo__safe');
var unsafeReplacement = document.querySelector('.eyo__unsafe');

var safeReq = new XMLHttpRequest();
safeReq.addEventListener('load', function () {
    safeEyo.dictionary.set(depack(safeReq.responseText).join('\n'));
});

safeReq.open('GET', './build/safe.min.txt', true);
safeReq.send();

var unsafeReq = new XMLHttpRequest();
unsafeReq.addEventListener('load', function () {
    unsafeEyo.dictionary.set(depack(unsafeReq.responseText).join('\n'));
});

unsafeReq.open('GET', './build/unsafe.min.txt', true);
unsafeReq.send();

input.focus();
button.addEventListener('click', function () {
    var safeCount = 0;
    var unsafeCount = 0;
    var text = input.innerHTML.replace(/<span class="eyo__[^>]+?>([еЕёЁ])<\/span>/g, '$1');
    var newText = safeEyo.restore(text);
    var result = [];

    for (var i = 0; i < text.length; i++) {
        if (text[i] !== newText[i]) {
            result.push('<span class="eyo__ok" title="Безопасная замена">' + newText[i] + '</span>');
            safeCount++;
        } else {
            result.push(text[i]);
        }
    }

    input.innerHTML = result.join('');

    safeReplacement.innerHTML = 'Замен: <span class="eyo__safe-count">' + safeCount + '</span>';
    unsafeReplacement.innerHTML = 'Предупреждений: <span class="eyo__unsafe-count">' + unsafeCount + '</span>';
}, false);

},{"./depack":6,"eyo-kernel":3}]},{},[7]);
